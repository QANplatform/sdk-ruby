=begin
#QAN AutoApi

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 0.0.2

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'date'
require 'time'

module OpenapiClient
  class ResponseBlock
    # A string of the base fee encoded in decimal format. Please note that this response field will not be included in a block requested before the EIP-1559 upgrade
    attr_accessor :base_fee_per_gas

    # The integer of the difficulty for this block encoded as a decimal
    attr_accessor :difficulty

    # The “extra data” field of this block
    attr_accessor :extra_data

    # The maximum gas allowed in this block encoded as a decimal
    attr_accessor :gas_limit

    # The total used gas by all transactions in this block encoded as a decimal
    attr_accessor :gas_used

    # The block hash of the requested block. null if pending
    attr_accessor :hash

    # The bloom filter for the logs of the block. null if pending
    attr_accessor :logs_bloom

    # The address of the beneficiary to whom the mining rewards were given
    attr_accessor :miner

    # A string of a 256-bit hash encoded as a decimal
    attr_accessor :mix_hash

    # The hash of the generated proof-of-work. null if pending
    attr_accessor :nonce

    # The block number of the requested block encoded as a decimal. null if pending
    attr_accessor :number

    # The hash of the parent block
    attr_accessor :parent_hash

    # The root of the receipts trie of the bloc
    attr_accessor :receipts_root

    # The SHA3 of the uncles data in the block
    attr_accessor :sha3_uncles

    # The size of this block in bytes as an Integer value encoded as decimal
    attr_accessor :size

    # The root of the final state trie of the block
    attr_accessor :state_root

    # The unix timestamp for when the block was collated
    attr_accessor :timestamp

    # The integer of the total difficulty of the chain until this block encoded as a decimal
    attr_accessor :total_difficulty

    # An array of transaction objects - please see getTransactionByHash for exact shape
    attr_accessor :transactions

    # The root of the transaction trie of the block
    attr_accessor :transactions_root

    # An array of uncle hashes
    attr_accessor :uncles

    # A withdrawals object contains information about withdrawals made by validators. Please note that this field will not be included in a block requested before the EIP-4895 upgrade
    attr_accessor :withdrawals

    # The Merkle root of withdrawal data. Also, please note that this field will not be included in a block requested before the EIP-4895 upgrade
    attr_accessor :withdrawals_root

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'base_fee_per_gas' => :'BaseFeePerGas',
        :'difficulty' => :'Difficulty',
        :'extra_data' => :'ExtraData',
        :'gas_limit' => :'GasLimit',
        :'gas_used' => :'GasUsed',
        :'hash' => :'Hash',
        :'logs_bloom' => :'LogsBloom',
        :'miner' => :'Miner',
        :'mix_hash' => :'MixHash',
        :'nonce' => :'Nonce',
        :'number' => :'Number',
        :'parent_hash' => :'ParentHash',
        :'receipts_root' => :'ReceiptsRoot',
        :'sha3_uncles' => :'Sha3Uncles',
        :'size' => :'Size',
        :'state_root' => :'StateRoot',
        :'timestamp' => :'Timestamp',
        :'total_difficulty' => :'TotalDifficulty',
        :'transactions' => :'Transactions',
        :'transactions_root' => :'TransactionsRoot',
        :'uncles' => :'Uncles',
        :'withdrawals' => :'Withdrawals',
        :'withdrawals_root' => :'WithdrawalsRoot'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'base_fee_per_gas' => :'String',
        :'difficulty' => :'String',
        :'extra_data' => :'String',
        :'gas_limit' => :'String',
        :'gas_used' => :'String',
        :'hash' => :'String',
        :'logs_bloom' => :'String',
        :'miner' => :'String',
        :'mix_hash' => :'String',
        :'nonce' => :'String',
        :'number' => :'String',
        :'parent_hash' => :'String',
        :'receipts_root' => :'String',
        :'sha3_uncles' => :'String',
        :'size' => :'String',
        :'state_root' => :'String',
        :'timestamp' => :'String',
        :'total_difficulty' => :'String',
        :'transactions' => :'Array<ResponseTransaction>',
        :'transactions_root' => :'String',
        :'uncles' => :'Array<String>',
        :'withdrawals' => :'ResponseWithdrawals',
        :'withdrawals_root' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'base_fee_per_gas',
        :'hash',
        :'logs_bloom',
        :'nonce',
        :'number',
        :'withdrawals_root'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::ResponseBlock` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::ResponseBlock`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'base_fee_per_gas')
        self.base_fee_per_gas = attributes[:'base_fee_per_gas']
      else
        self.base_fee_per_gas = nil
      end

      if attributes.key?(:'difficulty')
        self.difficulty = attributes[:'difficulty']
      else
        self.difficulty = nil
      end

      if attributes.key?(:'extra_data')
        self.extra_data = attributes[:'extra_data']
      else
        self.extra_data = nil
      end

      if attributes.key?(:'gas_limit')
        self.gas_limit = attributes[:'gas_limit']
      else
        self.gas_limit = nil
      end

      if attributes.key?(:'gas_used')
        self.gas_used = attributes[:'gas_used']
      else
        self.gas_used = nil
      end

      if attributes.key?(:'hash')
        self.hash = attributes[:'hash']
      else
        self.hash = nil
      end

      if attributes.key?(:'logs_bloom')
        self.logs_bloom = attributes[:'logs_bloom']
      else
        self.logs_bloom = nil
      end

      if attributes.key?(:'miner')
        self.miner = attributes[:'miner']
      else
        self.miner = nil
      end

      if attributes.key?(:'mix_hash')
        self.mix_hash = attributes[:'mix_hash']
      else
        self.mix_hash = nil
      end

      if attributes.key?(:'nonce')
        self.nonce = attributes[:'nonce']
      else
        self.nonce = nil
      end

      if attributes.key?(:'number')
        self.number = attributes[:'number']
      else
        self.number = nil
      end

      if attributes.key?(:'parent_hash')
        self.parent_hash = attributes[:'parent_hash']
      else
        self.parent_hash = nil
      end

      if attributes.key?(:'receipts_root')
        self.receipts_root = attributes[:'receipts_root']
      else
        self.receipts_root = nil
      end

      if attributes.key?(:'sha3_uncles')
        self.sha3_uncles = attributes[:'sha3_uncles']
      else
        self.sha3_uncles = nil
      end

      if attributes.key?(:'size')
        self.size = attributes[:'size']
      else
        self.size = nil
      end

      if attributes.key?(:'state_root')
        self.state_root = attributes[:'state_root']
      else
        self.state_root = nil
      end

      if attributes.key?(:'timestamp')
        self.timestamp = attributes[:'timestamp']
      else
        self.timestamp = nil
      end

      if attributes.key?(:'total_difficulty')
        self.total_difficulty = attributes[:'total_difficulty']
      else
        self.total_difficulty = nil
      end

      if attributes.key?(:'transactions')
        if (value = attributes[:'transactions']).is_a?(Array)
          self.transactions = value
        end
      else
        self.transactions = nil
      end

      if attributes.key?(:'transactions_root')
        self.transactions_root = attributes[:'transactions_root']
      else
        self.transactions_root = nil
      end

      if attributes.key?(:'uncles')
        if (value = attributes[:'uncles']).is_a?(Array)
          self.uncles = value
        end
      else
        self.uncles = nil
      end

      if attributes.key?(:'withdrawals')
        self.withdrawals = attributes[:'withdrawals']
      else
        self.withdrawals = nil
      end

      if attributes.key?(:'withdrawals_root')
        self.withdrawals_root = attributes[:'withdrawals_root']
      else
        self.withdrawals_root = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @difficulty.nil?
        invalid_properties.push('invalid value for "difficulty", difficulty cannot be nil.')
      end

      if @extra_data.nil?
        invalid_properties.push('invalid value for "extra_data", extra_data cannot be nil.')
      end

      if @gas_limit.nil?
        invalid_properties.push('invalid value for "gas_limit", gas_limit cannot be nil.')
      end

      if @gas_used.nil?
        invalid_properties.push('invalid value for "gas_used", gas_used cannot be nil.')
      end

      if @miner.nil?
        invalid_properties.push('invalid value for "miner", miner cannot be nil.')
      end

      if @mix_hash.nil?
        invalid_properties.push('invalid value for "mix_hash", mix_hash cannot be nil.')
      end

      if @parent_hash.nil?
        invalid_properties.push('invalid value for "parent_hash", parent_hash cannot be nil.')
      end

      if @receipts_root.nil?
        invalid_properties.push('invalid value for "receipts_root", receipts_root cannot be nil.')
      end

      if @sha3_uncles.nil?
        invalid_properties.push('invalid value for "sha3_uncles", sha3_uncles cannot be nil.')
      end

      if @size.nil?
        invalid_properties.push('invalid value for "size", size cannot be nil.')
      end

      if @state_root.nil?
        invalid_properties.push('invalid value for "state_root", state_root cannot be nil.')
      end

      if @timestamp.nil?
        invalid_properties.push('invalid value for "timestamp", timestamp cannot be nil.')
      end

      if @total_difficulty.nil?
        invalid_properties.push('invalid value for "total_difficulty", total_difficulty cannot be nil.')
      end

      if @transactions.nil?
        invalid_properties.push('invalid value for "transactions", transactions cannot be nil.')
      end

      if @transactions_root.nil?
        invalid_properties.push('invalid value for "transactions_root", transactions_root cannot be nil.')
      end

      if @uncles.nil?
        invalid_properties.push('invalid value for "uncles", uncles cannot be nil.')
      end

      if @withdrawals.nil?
        invalid_properties.push('invalid value for "withdrawals", withdrawals cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @difficulty.nil?
      return false if @extra_data.nil?
      return false if @gas_limit.nil?
      return false if @gas_used.nil?
      return false if @miner.nil?
      return false if @mix_hash.nil?
      return false if @parent_hash.nil?
      return false if @receipts_root.nil?
      return false if @sha3_uncles.nil?
      return false if @size.nil?
      return false if @state_root.nil?
      return false if @timestamp.nil?
      return false if @total_difficulty.nil?
      return false if @transactions.nil?
      return false if @transactions_root.nil?
      return false if @uncles.nil?
      return false if @withdrawals.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          base_fee_per_gas == o.base_fee_per_gas &&
          difficulty == o.difficulty &&
          extra_data == o.extra_data &&
          gas_limit == o.gas_limit &&
          gas_used == o.gas_used &&
          hash == o.hash &&
          logs_bloom == o.logs_bloom &&
          miner == o.miner &&
          mix_hash == o.mix_hash &&
          nonce == o.nonce &&
          number == o.number &&
          parent_hash == o.parent_hash &&
          receipts_root == o.receipts_root &&
          sha3_uncles == o.sha3_uncles &&
          size == o.size &&
          state_root == o.state_root &&
          timestamp == o.timestamp &&
          total_difficulty == o.total_difficulty &&
          transactions == o.transactions &&
          transactions_root == o.transactions_root &&
          uncles == o.uncles &&
          withdrawals == o.withdrawals &&
          withdrawals_root == o.withdrawals_root
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [base_fee_per_gas, difficulty, extra_data, gas_limit, gas_used, hash, logs_bloom, miner, mix_hash, nonce, number, parent_hash, receipts_root, sha3_uncles, size, state_root, timestamp, total_difficulty, transactions, transactions_root, uncles, withdrawals, withdrawals_root].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
