=begin
#QAN AutoApi

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 0.0.2

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'cgi'

module OpenapiClient
  class QANApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Returns the latest block number of the blockchain.
    # @param [Hash] opts the optional parameters
    # @return [OutputBlockNumber]
    def qan_block_number(opts = {})
      data, _status_code, _headers = qan_block_number_with_http_info(opts)
      data
    end

    # Returns the latest block number of the blockchain.
    # @param [Hash] opts the optional parameters
    # @return [Array<(OutputBlockNumber, Integer, Hash)>] OutputBlockNumber data, response status code and response headers
    def qan_block_number_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QANApi.qan_block_number ...'
      end
      # resource path
      local_var_path = '/blockNumber/'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OutputBlockNumber'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"QANApi.qan_block_number",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QANApi#qan_block_number\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Executes a new message call immediately without creating a transaction on the block chain.
    # @param input_call [InputCall] 
    # @param [Hash] opts the optional parameters
    # @return [OutputCall]
    def qan_call(input_call, opts = {})
      data, _status_code, _headers = qan_call_with_http_info(input_call, opts)
      data
    end

    # Executes a new message call immediately without creating a transaction on the block chain.
    # @param input_call [InputCall] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OutputCall, Integer, Hash)>] OutputCall data, response status code and response headers
    def qan_call_with_http_info(input_call, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QANApi.qan_call ...'
      end
      # verify the required parameter 'input_call' is set
      if @api_client.config.client_side_validation && input_call.nil?
        fail ArgumentError, "Missing the required parameter 'input_call' when calling QANApi.qan_call"
      end
      # resource path
      local_var_path = '/call/'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(input_call)

      # return_type
      return_type = opts[:debug_return_type] || 'OutputCall'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"QANApi.qan_call",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QANApi#qan_call\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns the current network/chain ID, used to sign replay-protected transaction introduced in EIP-155.
    # @param [Hash] opts the optional parameters
    # @return [OutputChainId]
    def qan_chain_id(opts = {})
      data, _status_code, _headers = qan_chain_id_with_http_info(opts)
      data
    end

    # Returns the current network/chain ID, used to sign replay-protected transaction introduced in EIP-155.
    # @param [Hash] opts the optional parameters
    # @return [Array<(OutputChainId, Integer, Hash)>] OutputChainId data, response status code and response headers
    def qan_chain_id_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QANApi.qan_chain_id ...'
      end
      # resource path
      local_var_path = '/chainId/'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OutputChainId'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"QANApi.qan_chain_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QANApi#qan_chain_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns an estimation of gas for a given transaction.
    # @param input_estimate_gas [InputEstimateGas] 
    # @param [Hash] opts the optional parameters
    # @return [OutputEstimateGas]
    def qan_estimate_gas(input_estimate_gas, opts = {})
      data, _status_code, _headers = qan_estimate_gas_with_http_info(input_estimate_gas, opts)
      data
    end

    # Returns an estimation of gas for a given transaction.
    # @param input_estimate_gas [InputEstimateGas] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OutputEstimateGas, Integer, Hash)>] OutputEstimateGas data, response status code and response headers
    def qan_estimate_gas_with_http_info(input_estimate_gas, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QANApi.qan_estimate_gas ...'
      end
      # verify the required parameter 'input_estimate_gas' is set
      if @api_client.config.client_side_validation && input_estimate_gas.nil?
        fail ArgumentError, "Missing the required parameter 'input_estimate_gas' when calling QANApi.qan_estimate_gas"
      end
      # resource path
      local_var_path = '/estimateGas/'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(input_estimate_gas)

      # return_type
      return_type = opts[:debug_return_type] || 'OutputEstimateGas'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"QANApi.qan_estimate_gas",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QANApi#qan_estimate_gas\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns the collection of historical gas information.
    # @param input_fee_history [InputFeeHistory] 
    # @param [Hash] opts the optional parameters
    # @return [OutputFeeHistory]
    def qan_fee_history(input_fee_history, opts = {})
      data, _status_code, _headers = qan_fee_history_with_http_info(input_fee_history, opts)
      data
    end

    # Returns the collection of historical gas information.
    # @param input_fee_history [InputFeeHistory] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OutputFeeHistory, Integer, Hash)>] OutputFeeHistory data, response status code and response headers
    def qan_fee_history_with_http_info(input_fee_history, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QANApi.qan_fee_history ...'
      end
      # verify the required parameter 'input_fee_history' is set
      if @api_client.config.client_side_validation && input_fee_history.nil?
        fail ArgumentError, "Missing the required parameter 'input_fee_history' when calling QANApi.qan_fee_history"
      end
      # resource path
      local_var_path = '/feeHistory/'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(input_fee_history)

      # return_type
      return_type = opts[:debug_return_type] || 'OutputFeeHistory'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"QANApi.qan_fee_history",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QANApi#qan_fee_history\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns the current gas price on the network in wei.
    # @param [Hash] opts the optional parameters
    # @return [OutputGasPrice]
    def qan_gas_price(opts = {})
      data, _status_code, _headers = qan_gas_price_with_http_info(opts)
      data
    end

    # Returns the current gas price on the network in wei.
    # @param [Hash] opts the optional parameters
    # @return [Array<(OutputGasPrice, Integer, Hash)>] OutputGasPrice data, response status code and response headers
    def qan_gas_price_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QANApi.qan_gas_price ...'
      end
      # resource path
      local_var_path = '/gasPrice/'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OutputGasPrice'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"QANApi.qan_gas_price",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QANApi#qan_gas_price\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns the balance of the account of given address.
    # @param address [String] A 20 bytes long hexadecimal value representing an address
    # @param [Hash] opts the optional parameters
    # @option opts [String] :block_number The block number in hexadecimal or decimal format or the string latest, earliest, pending (default to 'latest')
    # @return [OutputGetBalance]
    def qan_get_balance(address, opts = {})
      data, _status_code, _headers = qan_get_balance_with_http_info(address, opts)
      data
    end

    # Returns the balance of the account of given address.
    # @param address [String] A 20 bytes long hexadecimal value representing an address
    # @param [Hash] opts the optional parameters
    # @option opts [String] :block_number The block number in hexadecimal or decimal format or the string latest, earliest, pending (default to 'latest')
    # @return [Array<(OutputGetBalance, Integer, Hash)>] OutputGetBalance data, response status code and response headers
    def qan_get_balance_with_http_info(address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QANApi.qan_get_balance ...'
      end
      # verify the required parameter 'address' is set
      if @api_client.config.client_side_validation && address.nil?
        fail ArgumentError, "Missing the required parameter 'address' when calling QANApi.qan_get_balance"
      end
      # resource path
      local_var_path = '/getBalance/{Address}/'.sub('{' + 'Address' + '}', CGI.escape(address.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'BlockNumber'] = opts[:'block_number'] if !opts[:'block_number'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OutputGetBalance'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"QANApi.qan_get_balance",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QANApi#qan_get_balance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns information of the block matching the given block hash.
    # @param hash [String] The hash (32 bytes) of the block
    # @param transaction_detail_flag [Boolean] The method returns the full transaction objects when this value is true otherwise, it returns only the hashes of the transactions
    # @param [Hash] opts the optional parameters
    # @return [OutputGetBlockByHash]
    def qan_get_block_by_hash(hash, transaction_detail_flag, opts = {})
      data, _status_code, _headers = qan_get_block_by_hash_with_http_info(hash, transaction_detail_flag, opts)
      data
    end

    # Returns information of the block matching the given block hash.
    # @param hash [String] The hash (32 bytes) of the block
    # @param transaction_detail_flag [Boolean] The method returns the full transaction objects when this value is true otherwise, it returns only the hashes of the transactions
    # @param [Hash] opts the optional parameters
    # @return [Array<(OutputGetBlockByHash, Integer, Hash)>] OutputGetBlockByHash data, response status code and response headers
    def qan_get_block_by_hash_with_http_info(hash, transaction_detail_flag, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QANApi.qan_get_block_by_hash ...'
      end
      # verify the required parameter 'hash' is set
      if @api_client.config.client_side_validation && hash.nil?
        fail ArgumentError, "Missing the required parameter 'hash' when calling QANApi.qan_get_block_by_hash"
      end
      # verify the required parameter 'transaction_detail_flag' is set
      if @api_client.config.client_side_validation && transaction_detail_flag.nil?
        fail ArgumentError, "Missing the required parameter 'transaction_detail_flag' when calling QANApi.qan_get_block_by_hash"
      end
      # resource path
      local_var_path = '/getBlockByHash/{Hash}/{TransactionDetailFlag}/'.sub('{' + 'Hash' + '}', CGI.escape(hash.to_s)).sub('{' + 'TransactionDetailFlag' + '}', CGI.escape(transaction_detail_flag.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OutputGetBlockByHash'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"QANApi.qan_get_block_by_hash",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QANApi#qan_get_block_by_hash\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns information of the block matching the given block number.
    # @param block_number [String] The block number in hexadecimal or decimal format or the string latest, earliest, pending
    # @param transaction_detail_flag [Boolean] The method returns the full transaction objects when this value is true otherwise, it returns only the hashes of the transactions
    # @param [Hash] opts the optional parameters
    # @return [OutputGetBlockByNumber]
    def qan_get_block_by_number(block_number, transaction_detail_flag, opts = {})
      data, _status_code, _headers = qan_get_block_by_number_with_http_info(block_number, transaction_detail_flag, opts)
      data
    end

    # Returns information of the block matching the given block number.
    # @param block_number [String] The block number in hexadecimal or decimal format or the string latest, earliest, pending
    # @param transaction_detail_flag [Boolean] The method returns the full transaction objects when this value is true otherwise, it returns only the hashes of the transactions
    # @param [Hash] opts the optional parameters
    # @return [Array<(OutputGetBlockByNumber, Integer, Hash)>] OutputGetBlockByNumber data, response status code and response headers
    def qan_get_block_by_number_with_http_info(block_number, transaction_detail_flag, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QANApi.qan_get_block_by_number ...'
      end
      # verify the required parameter 'block_number' is set
      if @api_client.config.client_side_validation && block_number.nil?
        fail ArgumentError, "Missing the required parameter 'block_number' when calling QANApi.qan_get_block_by_number"
      end
      # verify the required parameter 'transaction_detail_flag' is set
      if @api_client.config.client_side_validation && transaction_detail_flag.nil?
        fail ArgumentError, "Missing the required parameter 'transaction_detail_flag' when calling QANApi.qan_get_block_by_number"
      end
      # resource path
      local_var_path = '/getBlockByNumber/{BlockNumber}/{TransactionDetailFlag}/'.sub('{' + 'BlockNumber' + '}', CGI.escape(block_number.to_s)).sub('{' + 'TransactionDetailFlag' + '}', CGI.escape(transaction_detail_flag.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OutputGetBlockByNumber'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"QANApi.qan_get_block_by_number",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QANApi#qan_get_block_by_number\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns all transaction receipts for a given block.
    # @param block_number [String] The block number in hexadecimal or decimal format or the string latest, earliest, pending
    # @param [Hash] opts the optional parameters
    # @return [OutputGetBlockReceipts]
    def qan_get_block_receipts(block_number, opts = {})
      data, _status_code, _headers = qan_get_block_receipts_with_http_info(block_number, opts)
      data
    end

    # Returns all transaction receipts for a given block.
    # @param block_number [String] The block number in hexadecimal or decimal format or the string latest, earliest, pending
    # @param [Hash] opts the optional parameters
    # @return [Array<(OutputGetBlockReceipts, Integer, Hash)>] OutputGetBlockReceipts data, response status code and response headers
    def qan_get_block_receipts_with_http_info(block_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QANApi.qan_get_block_receipts ...'
      end
      # verify the required parameter 'block_number' is set
      if @api_client.config.client_side_validation && block_number.nil?
        fail ArgumentError, "Missing the required parameter 'block_number' when calling QANApi.qan_get_block_receipts"
      end
      # resource path
      local_var_path = '/getBlockReceipts/{BlockNumber}/'.sub('{' + 'BlockNumber' + '}', CGI.escape(block_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OutputGetBlockReceipts'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"QANApi.qan_get_block_receipts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QANApi#qan_get_block_receipts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns the number of transactions for the block matching the given block hash.
    # @param hash [String] The hash of the block
    # @param [Hash] opts the optional parameters
    # @return [OutputGetBlockTransactionCountByHash]
    def qan_get_block_transaction_count_by_hash(hash, opts = {})
      data, _status_code, _headers = qan_get_block_transaction_count_by_hash_with_http_info(hash, opts)
      data
    end

    # Returns the number of transactions for the block matching the given block hash.
    # @param hash [String] The hash of the block
    # @param [Hash] opts the optional parameters
    # @return [Array<(OutputGetBlockTransactionCountByHash, Integer, Hash)>] OutputGetBlockTransactionCountByHash data, response status code and response headers
    def qan_get_block_transaction_count_by_hash_with_http_info(hash, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QANApi.qan_get_block_transaction_count_by_hash ...'
      end
      # verify the required parameter 'hash' is set
      if @api_client.config.client_side_validation && hash.nil?
        fail ArgumentError, "Missing the required parameter 'hash' when calling QANApi.qan_get_block_transaction_count_by_hash"
      end
      # resource path
      local_var_path = '/getBlockTransactionCountByHash/{Hash}/'.sub('{' + 'Hash' + '}', CGI.escape(hash.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OutputGetBlockTransactionCountByHash'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"QANApi.qan_get_block_transaction_count_by_hash",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QANApi#qan_get_block_transaction_count_by_hash\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns the number of transactions for the block matching the given block number.
    # @param block_number [String] The block number in hexadecimal or decimal format or the string latest, earliest, pending
    # @param [Hash] opts the optional parameters
    # @return [OutputGetBlockTransactionCountByNumber]
    def qan_get_block_transaction_count_by_number(block_number, opts = {})
      data, _status_code, _headers = qan_get_block_transaction_count_by_number_with_http_info(block_number, opts)
      data
    end

    # Returns the number of transactions for the block matching the given block number.
    # @param block_number [String] The block number in hexadecimal or decimal format or the string latest, earliest, pending
    # @param [Hash] opts the optional parameters
    # @return [Array<(OutputGetBlockTransactionCountByNumber, Integer, Hash)>] OutputGetBlockTransactionCountByNumber data, response status code and response headers
    def qan_get_block_transaction_count_by_number_with_http_info(block_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QANApi.qan_get_block_transaction_count_by_number ...'
      end
      # verify the required parameter 'block_number' is set
      if @api_client.config.client_side_validation && block_number.nil?
        fail ArgumentError, "Missing the required parameter 'block_number' when calling QANApi.qan_get_block_transaction_count_by_number"
      end
      # resource path
      local_var_path = '/getBlockTransactionCountByNumber/{BlockNumber}/'.sub('{' + 'BlockNumber' + '}', CGI.escape(block_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OutputGetBlockTransactionCountByNumber'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"QANApi.qan_get_block_transaction_count_by_number",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QANApi#qan_get_block_transaction_count_by_number\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns the compiled bytecode of a smart contract.
    # @param address [String] The address of the smart contract from which the bytecode will be obtained
    # @param [Hash] opts the optional parameters
    # @option opts [String] :block_number The block number in hexadecimal or decimal format or the string latest, earliest, pending (default to 'latest')
    # @return [OutputGetCode]
    def qan_get_code(address, opts = {})
      data, _status_code, _headers = qan_get_code_with_http_info(address, opts)
      data
    end

    # Returns the compiled bytecode of a smart contract.
    # @param address [String] The address of the smart contract from which the bytecode will be obtained
    # @param [Hash] opts the optional parameters
    # @option opts [String] :block_number The block number in hexadecimal or decimal format or the string latest, earliest, pending (default to 'latest')
    # @return [Array<(OutputGetCode, Integer, Hash)>] OutputGetCode data, response status code and response headers
    def qan_get_code_with_http_info(address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QANApi.qan_get_code ...'
      end
      # verify the required parameter 'address' is set
      if @api_client.config.client_side_validation && address.nil?
        fail ArgumentError, "Missing the required parameter 'address' when calling QANApi.qan_get_code"
      end
      # resource path
      local_var_path = '/getCode/{Address}/'.sub('{' + 'Address' + '}', CGI.escape(address.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'BlockNumber'] = opts[:'block_number'] if !opts[:'block_number'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OutputGetCode'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"QANApi.qan_get_code",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QANApi#qan_get_code\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Polling method for a filter, which returns an array of events that have occurred since the last poll.
    # @param filter_id [String] The filter id that is returned from getFilterChangesnewFilter, getFilterChangesnewBlockFilter or getFilterChangesnewPendingTransactionFilter
    # @param [Hash] opts the optional parameters
    # @return [OutputGetFilterChanges]
    def qan_get_filter_changes(filter_id, opts = {})
      data, _status_code, _headers = qan_get_filter_changes_with_http_info(filter_id, opts)
      data
    end

    # Polling method for a filter, which returns an array of events that have occurred since the last poll.
    # @param filter_id [String] The filter id that is returned from getFilterChangesnewFilter, getFilterChangesnewBlockFilter or getFilterChangesnewPendingTransactionFilter
    # @param [Hash] opts the optional parameters
    # @return [Array<(OutputGetFilterChanges, Integer, Hash)>] OutputGetFilterChanges data, response status code and response headers
    def qan_get_filter_changes_with_http_info(filter_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QANApi.qan_get_filter_changes ...'
      end
      # verify the required parameter 'filter_id' is set
      if @api_client.config.client_side_validation && filter_id.nil?
        fail ArgumentError, "Missing the required parameter 'filter_id' when calling QANApi.qan_get_filter_changes"
      end
      # resource path
      local_var_path = '/getFilterChanges/{FilterId}/'.sub('{' + 'FilterId' + '}', CGI.escape(filter_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OutputGetFilterChanges'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"QANApi.qan_get_filter_changes",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QANApi#qan_get_filter_changes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns an array of all logs matching filter with given id.
    # @param id [String] The filter ID
    # @param [Hash] opts the optional parameters
    # @return [OutputGetFilterLogs]
    def qan_get_filter_logs(id, opts = {})
      data, _status_code, _headers = qan_get_filter_logs_with_http_info(id, opts)
      data
    end

    # Returns an array of all logs matching filter with given id.
    # @param id [String] The filter ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(OutputGetFilterLogs, Integer, Hash)>] OutputGetFilterLogs data, response status code and response headers
    def qan_get_filter_logs_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QANApi.qan_get_filter_logs ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling QANApi.qan_get_filter_logs"
      end
      # resource path
      local_var_path = '/getFilterLogs/{Id}/'.sub('{' + 'Id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OutputGetFilterLogs'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"QANApi.qan_get_filter_logs",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QANApi#qan_get_filter_logs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns an array of all logs matching a given filter object.
    # @param input_get_logs [InputGetLogs] 
    # @param [Hash] opts the optional parameters
    # @return [OutputGetLogs]
    def qan_get_logs(input_get_logs, opts = {})
      data, _status_code, _headers = qan_get_logs_with_http_info(input_get_logs, opts)
      data
    end

    # Returns an array of all logs matching a given filter object.
    # @param input_get_logs [InputGetLogs] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OutputGetLogs, Integer, Hash)>] OutputGetLogs data, response status code and response headers
    def qan_get_logs_with_http_info(input_get_logs, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QANApi.qan_get_logs ...'
      end
      # verify the required parameter 'input_get_logs' is set
      if @api_client.config.client_side_validation && input_get_logs.nil?
        fail ArgumentError, "Missing the required parameter 'input_get_logs' when calling QANApi.qan_get_logs"
      end
      # resource path
      local_var_path = '/getLogs/'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(input_get_logs)

      # return_type
      return_type = opts[:debug_return_type] || 'OutputGetLogs'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"QANApi.qan_get_logs",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QANApi#qan_get_logs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns the account and storage values of the specified account including the Merkle-proof.
    # @param input_get_proof [InputGetProof] 
    # @param [Hash] opts the optional parameters
    # @return [OutputGetProof]
    def qan_get_proof(input_get_proof, opts = {})
      data, _status_code, _headers = qan_get_proof_with_http_info(input_get_proof, opts)
      data
    end

    # Returns the account and storage values of the specified account including the Merkle-proof.
    # @param input_get_proof [InputGetProof] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OutputGetProof, Integer, Hash)>] OutputGetProof data, response status code and response headers
    def qan_get_proof_with_http_info(input_get_proof, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QANApi.qan_get_proof ...'
      end
      # verify the required parameter 'input_get_proof' is set
      if @api_client.config.client_side_validation && input_get_proof.nil?
        fail ArgumentError, "Missing the required parameter 'input_get_proof' when calling QANApi.qan_get_proof"
      end
      # resource path
      local_var_path = '/getProof/'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(input_get_proof)

      # return_type
      return_type = opts[:debug_return_type] || 'OutputGetProof'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"QANApi.qan_get_proof",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QANApi#qan_get_proof\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns the value from a storage position at a given address.
    # @param input_get_storage_at [InputGetStorageAt] 
    # @param [Hash] opts the optional parameters
    # @return [OutputGetStorageAt]
    def qan_get_storage_at(input_get_storage_at, opts = {})
      data, _status_code, _headers = qan_get_storage_at_with_http_info(input_get_storage_at, opts)
      data
    end

    # Returns the value from a storage position at a given address.
    # @param input_get_storage_at [InputGetStorageAt] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OutputGetStorageAt, Integer, Hash)>] OutputGetStorageAt data, response status code and response headers
    def qan_get_storage_at_with_http_info(input_get_storage_at, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QANApi.qan_get_storage_at ...'
      end
      # verify the required parameter 'input_get_storage_at' is set
      if @api_client.config.client_side_validation && input_get_storage_at.nil?
        fail ArgumentError, "Missing the required parameter 'input_get_storage_at' when calling QANApi.qan_get_storage_at"
      end
      # resource path
      local_var_path = '/getStorageAt/'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(input_get_storage_at)

      # return_type
      return_type = opts[:debug_return_type] || 'OutputGetStorageAt'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"QANApi.qan_get_storage_at",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QANApi#qan_get_storage_at\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns information about a transaction given a blockhash and transaction index position.
    # @param block_hash [String] 
    # @param index [String] An integer of the transaction index position
    # @param [Hash] opts the optional parameters
    # @return [OutputGetTransactionByBlockHashAndIndex]
    def qan_get_transaction_by_block_hash_and_index(block_hash, index, opts = {})
      data, _status_code, _headers = qan_get_transaction_by_block_hash_and_index_with_http_info(block_hash, index, opts)
      data
    end

    # Returns information about a transaction given a blockhash and transaction index position.
    # @param block_hash [String] 
    # @param index [String] An integer of the transaction index position
    # @param [Hash] opts the optional parameters
    # @return [Array<(OutputGetTransactionByBlockHashAndIndex, Integer, Hash)>] OutputGetTransactionByBlockHashAndIndex data, response status code and response headers
    def qan_get_transaction_by_block_hash_and_index_with_http_info(block_hash, index, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QANApi.qan_get_transaction_by_block_hash_and_index ...'
      end
      # verify the required parameter 'block_hash' is set
      if @api_client.config.client_side_validation && block_hash.nil?
        fail ArgumentError, "Missing the required parameter 'block_hash' when calling QANApi.qan_get_transaction_by_block_hash_and_index"
      end
      # verify the required parameter 'index' is set
      if @api_client.config.client_side_validation && index.nil?
        fail ArgumentError, "Missing the required parameter 'index' when calling QANApi.qan_get_transaction_by_block_hash_and_index"
      end
      # resource path
      local_var_path = '/getTransactionByBlockHashAndIndex/{blockHash}/{index}/'.sub('{' + 'blockHash' + '}', CGI.escape(block_hash.to_s)).sub('{' + 'index' + '}', CGI.escape(index.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OutputGetTransactionByBlockHashAndIndex'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"QANApi.qan_get_transaction_by_block_hash_and_index",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QANApi#qan_get_transaction_by_block_hash_and_index\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns information about a transaction given a block number and transaction index position.
    # @param block_number [String] The block number in hexadecimal or decimal format or the string latest, earliest, pending
    # @param index [String] An integer of the transaction index position
    # @param [Hash] opts the optional parameters
    # @return [OutputGetTransactionByBlockNumberAndIndex]
    def qan_get_transaction_by_block_number_and_index(block_number, index, opts = {})
      data, _status_code, _headers = qan_get_transaction_by_block_number_and_index_with_http_info(block_number, index, opts)
      data
    end

    # Returns information about a transaction given a block number and transaction index position.
    # @param block_number [String] The block number in hexadecimal or decimal format or the string latest, earliest, pending
    # @param index [String] An integer of the transaction index position
    # @param [Hash] opts the optional parameters
    # @return [Array<(OutputGetTransactionByBlockNumberAndIndex, Integer, Hash)>] OutputGetTransactionByBlockNumberAndIndex data, response status code and response headers
    def qan_get_transaction_by_block_number_and_index_with_http_info(block_number, index, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QANApi.qan_get_transaction_by_block_number_and_index ...'
      end
      # verify the required parameter 'block_number' is set
      if @api_client.config.client_side_validation && block_number.nil?
        fail ArgumentError, "Missing the required parameter 'block_number' when calling QANApi.qan_get_transaction_by_block_number_and_index"
      end
      # verify the required parameter 'index' is set
      if @api_client.config.client_side_validation && index.nil?
        fail ArgumentError, "Missing the required parameter 'index' when calling QANApi.qan_get_transaction_by_block_number_and_index"
      end
      # resource path
      local_var_path = '/getTransactionByBlockNumberAndIndex/{blockNumber}/{index}/'.sub('{' + 'blockNumber' + '}', CGI.escape(block_number.to_s)).sub('{' + 'index' + '}', CGI.escape(index.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OutputGetTransactionByBlockNumberAndIndex'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"QANApi.qan_get_transaction_by_block_number_and_index",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QANApi#qan_get_transaction_by_block_number_and_index\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns the information about a transaction from a transaction hash.
    # @param hash [String] The hash of a transaction
    # @param [Hash] opts the optional parameters
    # @return [OutputGetTransactionByHash]
    def qan_get_transaction_by_hash(hash, opts = {})
      data, _status_code, _headers = qan_get_transaction_by_hash_with_http_info(hash, opts)
      data
    end

    # Returns the information about a transaction from a transaction hash.
    # @param hash [String] The hash of a transaction
    # @param [Hash] opts the optional parameters
    # @return [Array<(OutputGetTransactionByHash, Integer, Hash)>] OutputGetTransactionByHash data, response status code and response headers
    def qan_get_transaction_by_hash_with_http_info(hash, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QANApi.qan_get_transaction_by_hash ...'
      end
      # verify the required parameter 'hash' is set
      if @api_client.config.client_side_validation && hash.nil?
        fail ArgumentError, "Missing the required parameter 'hash' when calling QANApi.qan_get_transaction_by_hash"
      end
      # resource path
      local_var_path = '/getTransactionByHash/{hash}/'.sub('{' + 'hash' + '}', CGI.escape(hash.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OutputGetTransactionByHash'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"QANApi.qan_get_transaction_by_hash",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QANApi#qan_get_transaction_by_hash\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns the number of transactions sent from an address.
    # @param address [String] The address from which the transaction count to be checked
    # @param block_number [String] The block number in hexadecimal or decimal format or the string latest, earliest, pending
    # @param [Hash] opts the optional parameters
    # @return [OutputGetTransactionCount]
    def qan_get_transaction_count(address, block_number, opts = {})
      data, _status_code, _headers = qan_get_transaction_count_with_http_info(address, block_number, opts)
      data
    end

    # Returns the number of transactions sent from an address.
    # @param address [String] The address from which the transaction count to be checked
    # @param block_number [String] The block number in hexadecimal or decimal format or the string latest, earliest, pending
    # @param [Hash] opts the optional parameters
    # @return [Array<(OutputGetTransactionCount, Integer, Hash)>] OutputGetTransactionCount data, response status code and response headers
    def qan_get_transaction_count_with_http_info(address, block_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QANApi.qan_get_transaction_count ...'
      end
      # verify the required parameter 'address' is set
      if @api_client.config.client_side_validation && address.nil?
        fail ArgumentError, "Missing the required parameter 'address' when calling QANApi.qan_get_transaction_count"
      end
      # verify the required parameter 'block_number' is set
      if @api_client.config.client_side_validation && block_number.nil?
        fail ArgumentError, "Missing the required parameter 'block_number' when calling QANApi.qan_get_transaction_count"
      end
      # resource path
      local_var_path = '/getTransactionCount/{Address}/{BlockNumber}/'.sub('{' + 'Address' + '}', CGI.escape(address.to_s)).sub('{' + 'BlockNumber' + '}', CGI.escape(block_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OutputGetTransactionCount'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"QANApi.qan_get_transaction_count",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QANApi#qan_get_transaction_count\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns the receipt of a transaction by transaction hash.
    # @param hash [String] The hash of a transaction
    # @param [Hash] opts the optional parameters
    # @return [OutputGetTransactionReceipt]
    def qan_get_transaction_receipt(hash, opts = {})
      data, _status_code, _headers = qan_get_transaction_receipt_with_http_info(hash, opts)
      data
    end

    # Returns the receipt of a transaction by transaction hash.
    # @param hash [String] The hash of a transaction
    # @param [Hash] opts the optional parameters
    # @return [Array<(OutputGetTransactionReceipt, Integer, Hash)>] OutputGetTransactionReceipt data, response status code and response headers
    def qan_get_transaction_receipt_with_http_info(hash, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QANApi.qan_get_transaction_receipt ...'
      end
      # verify the required parameter 'hash' is set
      if @api_client.config.client_side_validation && hash.nil?
        fail ArgumentError, "Missing the required parameter 'hash' when calling QANApi.qan_get_transaction_receipt"
      end
      # resource path
      local_var_path = '/getTransactionReceipt/{Hash}/'.sub('{' + 'Hash' + '}', CGI.escape(hash.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OutputGetTransactionReceipt'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"QANApi.qan_get_transaction_receipt",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QANApi#qan_get_transaction_receipt\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the priority fee needed to be included in a block.
    # @param [Hash] opts the optional parameters
    # @return [OutputMaxPriorityFeePerGas]
    def qan_max_priority_fee_per_gas(opts = {})
      data, _status_code, _headers = qan_max_priority_fee_per_gas_with_http_info(opts)
      data
    end

    # Get the priority fee needed to be included in a block.
    # @param [Hash] opts the optional parameters
    # @return [Array<(OutputMaxPriorityFeePerGas, Integer, Hash)>] OutputMaxPriorityFeePerGas data, response status code and response headers
    def qan_max_priority_fee_per_gas_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QANApi.qan_max_priority_fee_per_gas ...'
      end
      # resource path
      local_var_path = '/maxPriorityFeePerGas/'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OutputMaxPriorityFeePerGas'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"QANApi.qan_max_priority_fee_per_gas",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QANApi#qan_max_priority_fee_per_gas\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a filter in the node, to notify when a new block arrives.
    # @param [Hash] opts the optional parameters
    # @return [OutputNewBlockFilter]
    def qan_new_block_filter(opts = {})
      data, _status_code, _headers = qan_new_block_filter_with_http_info(opts)
      data
    end

    # Creates a filter in the node, to notify when a new block arrives.
    # @param [Hash] opts the optional parameters
    # @return [Array<(OutputNewBlockFilter, Integer, Hash)>] OutputNewBlockFilter data, response status code and response headers
    def qan_new_block_filter_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QANApi.qan_new_block_filter ...'
      end
      # resource path
      local_var_path = '/newBlockFilter/'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OutputNewBlockFilter'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"QANApi.qan_new_block_filter",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QANApi#qan_new_block_filter\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a filter object, based on filter options, to notify when the state changes (logs).
    # @param input_new_filter [InputNewFilter] 
    # @param [Hash] opts the optional parameters
    # @return [OutputNewFilter]
    def qan_new_filter(input_new_filter, opts = {})
      data, _status_code, _headers = qan_new_filter_with_http_info(input_new_filter, opts)
      data
    end

    # Creates a filter object, based on filter options, to notify when the state changes (logs).
    # @param input_new_filter [InputNewFilter] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OutputNewFilter, Integer, Hash)>] OutputNewFilter data, response status code and response headers
    def qan_new_filter_with_http_info(input_new_filter, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QANApi.qan_new_filter ...'
      end
      # verify the required parameter 'input_new_filter' is set
      if @api_client.config.client_side_validation && input_new_filter.nil?
        fail ArgumentError, "Missing the required parameter 'input_new_filter' when calling QANApi.qan_new_filter"
      end
      # resource path
      local_var_path = '/newFilter/'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(input_new_filter)

      # return_type
      return_type = opts[:debug_return_type] || 'OutputNewFilter'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"QANApi.qan_new_filter",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QANApi#qan_new_filter\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a filter in the node to notify when new pending transactions arrive.
    # @param [Hash] opts the optional parameters
    # @return [OutputNewPendingTransactionFilter]
    def qan_new_pending_transaction_filter(opts = {})
      data, _status_code, _headers = qan_new_pending_transaction_filter_with_http_info(opts)
      data
    end

    # Creates a filter in the node to notify when new pending transactions arrive.
    # @param [Hash] opts the optional parameters
    # @return [Array<(OutputNewPendingTransactionFilter, Integer, Hash)>] OutputNewPendingTransactionFilter data, response status code and response headers
    def qan_new_pending_transaction_filter_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QANApi.qan_new_pending_transaction_filter ...'
      end
      # resource path
      local_var_path = '/newPendingTransactionFilter/'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OutputNewPendingTransactionFilter'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"QANApi.qan_new_pending_transaction_filter",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QANApi#qan_new_pending_transaction_filter\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates new message call transaction or a contract creation for signed transactions.
    # @param input_send_raw_transaction [InputSendRawTransaction] 
    # @param [Hash] opts the optional parameters
    # @return [OutputSendRawTransaction]
    def qan_send_raw_transaction(input_send_raw_transaction, opts = {})
      data, _status_code, _headers = qan_send_raw_transaction_with_http_info(input_send_raw_transaction, opts)
      data
    end

    # Creates new message call transaction or a contract creation for signed transactions.
    # @param input_send_raw_transaction [InputSendRawTransaction] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OutputSendRawTransaction, Integer, Hash)>] OutputSendRawTransaction data, response status code and response headers
    def qan_send_raw_transaction_with_http_info(input_send_raw_transaction, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QANApi.qan_send_raw_transaction ...'
      end
      # verify the required parameter 'input_send_raw_transaction' is set
      if @api_client.config.client_side_validation && input_send_raw_transaction.nil?
        fail ArgumentError, "Missing the required parameter 'input_send_raw_transaction' when calling QANApi.qan_send_raw_transaction"
      end
      # resource path
      local_var_path = '/sendRawTransaction/'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(input_send_raw_transaction)

      # return_type
      return_type = opts[:debug_return_type] || 'OutputSendRawTransaction'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"QANApi.qan_send_raw_transaction",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QANApi#qan_send_raw_transaction\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns an object with the sync status of the node if the node is out-of-sync and is syncing. Returns null when the node is already in sync.
    # @param [Hash] opts the optional parameters
    # @return [OutputSyncing]
    def qan_syncing(opts = {})
      data, _status_code, _headers = qan_syncing_with_http_info(opts)
      data
    end

    # Returns an object with the sync status of the node if the node is out-of-sync and is syncing. Returns null when the node is already in sync.
    # @param [Hash] opts the optional parameters
    # @return [Array<(OutputSyncing, Integer, Hash)>] OutputSyncing data, response status code and response headers
    def qan_syncing_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QANApi.qan_syncing ...'
      end
      # resource path
      local_var_path = '/syncing/'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OutputSyncing'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"QANApi.qan_syncing",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QANApi#qan_syncing\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Uninstalls a filter with the given filter id.
    # @param filter_id [String] The filter ID that needs to be uninstalled. It should always be called when watch is no longer needed. Additionally, Filters timeout when they aren&#39;t requested with getFilterChanges for a period of time
    # @param [Hash] opts the optional parameters
    # @return [OutputUninstallFilter]
    def qan_uninstall_filter(filter_id, opts = {})
      data, _status_code, _headers = qan_uninstall_filter_with_http_info(filter_id, opts)
      data
    end

    # Uninstalls a filter with the given filter id.
    # @param filter_id [String] The filter ID that needs to be uninstalled. It should always be called when watch is no longer needed. Additionally, Filters timeout when they aren&#39;t requested with getFilterChanges for a period of time
    # @param [Hash] opts the optional parameters
    # @return [Array<(OutputUninstallFilter, Integer, Hash)>] OutputUninstallFilter data, response status code and response headers
    def qan_uninstall_filter_with_http_info(filter_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QANApi.qan_uninstall_filter ...'
      end
      # verify the required parameter 'filter_id' is set
      if @api_client.config.client_side_validation && filter_id.nil?
        fail ArgumentError, "Missing the required parameter 'filter_id' when calling QANApi.qan_uninstall_filter"
      end
      # resource path
      local_var_path = '/uninstallFilter/{FilterId}/'.sub('{' + 'FilterId' + '}', CGI.escape(filter_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OutputUninstallFilter'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"QANApi.qan_uninstall_filter",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QANApi#qan_uninstall_filter\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns the xlink validity time of the account of given address.
    # @param address [String] 
    # @param [Hash] opts the optional parameters
    # @return [OutputXlinkValid]
    def qan_xlink_valid(address, opts = {})
      data, _status_code, _headers = qan_xlink_valid_with_http_info(address, opts)
      data
    end

    # Returns the xlink validity time of the account of given address.
    # @param address [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OutputXlinkValid, Integer, Hash)>] OutputXlinkValid data, response status code and response headers
    def qan_xlink_valid_with_http_info(address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QANApi.qan_xlink_valid ...'
      end
      # verify the required parameter 'address' is set
      if @api_client.config.client_side_validation && address.nil?
        fail ArgumentError, "Missing the required parameter 'address' when calling QANApi.qan_xlink_valid"
      end
      # resource path
      local_var_path = '/xlinkValid/{Address}/'.sub('{' + 'Address' + '}', CGI.escape(address.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OutputXlinkValid'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"QANApi.qan_xlink_valid",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QANApi#qan_xlink_valid\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
